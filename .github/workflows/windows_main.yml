name: Complete Windows Build Workflow

on:
  repository_dispatch:
    types: [windows_build_trigger]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2



      - name: Get Config File
        id: config
        run: git clone https://github.com/JackChang0675/SkedAIConfig

      - name: Read Config File
        id: read_config
        run: |
          $configContent = Get-Content ./SkedAIConfig/mainConfig.txt
          $configContent | ForEach-Object {
            $key, $value = $_ -split ':', 2
            $key = $key.Trim()
            $value = $value.Trim()
            echo "$key=$value" | Out-File -Append -FilePath $env:GITHUB_ENV
          }
        shell: powershell
      
      - name: Check for changes in mod_sat_runner.cc
        run: |
          $changed = git diff HEAD~1 --name-only | Select-String -Pattern "mod_sat_runner/mod_sat_runner.cc"
          if ($null -ne $changed) {
            echo "MOD_SAT_RUNNER_CHANGED=true" >> $env:GITHUB_ENV
          } else {
            echo "MOD_SAT_RUNNER_CHANGED=false" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Get latest OR-Tools commit SHA from branch
        id: ortools_sha
        run: |
          $branch = "${{ env.ortools_branch }}"
          $uri = "https://api.github.com/repos/google/or-tools/commits/$branch"
          $response = Invoke-RestMethod -Uri $uri
          echo "ORTOOLS_LATEST_SHA=$($response.sha)" | Out-File -FilePath $env:GITHUB_ENV -Append
          echo "::set-output name=sha::$($response.sha)"
        shell: powershell
        env:
          ortools_branch: ${{ env.ortools_branch }}
      
      - name: Cache OR-Tools Build
        id: cache-ortools
        uses: actions/cache@v4
        with:
          path: or-tools
          # key: or-tools-${{ runner.os }}-${{ env.ORTOOLS_LATEST_SHA }}
          key: or-tools-${{ runner.os }}-${{ steps.ortools_sha.outputs.sha }}
          restore-keys: |
            or-tools-${{ runner.os }}-

      - name: Cache mod_sat_runner executable
        id: cache-mod-sat-runner
        uses: actions/cache@v4
        with:
          path: or-tools/temp_cpp/mod_sat_runner/build/Release/bin
          key: mod-sat-runner-${{ runner.os }}-${{ env.ORTOOLS_LATEST_SHA }}-${{ hashFiles('mod_sat_runner/**') }}
          restore-keys: mod-sat-runner-${{ runner.os }}-

      - name: Clone ORTools repository
        if: steps.cache-ortools.outputs.cache-hit != 'true'
        run: git clone -b ${{ env.ortools_branch }} https://github.com/google/or-tools or-tools
        
      - name: Copy mod_sat_runner.cc to OR-Tools
        if: env.MOD_SAT_RUNNER_CHANGED == 'true' || steps.cache-ortools.outputs.cache-hit != 'true' || steps.cache-mod-sat-runner.outputs.cache-hit != 'true'
        run: |
          choco install cmake --installargs 'ADD_CMAKE_TO_PATH=System'

      - name: Ensure CMake is installed
        if: env.MOD_SAT_RUNNER_CHANGED == 'true' || steps.cache-ortools.outputs.cache-hit != 'true' || steps.cache-mod-sat-runner.outputs.cache-hit != 'true'
        run: |
          choco list --local-only | Select-String "make" || choco install make
      
      - name: Install vcpkg
        if: env.MOD_SAT_RUNNER_CHANGED == 'true' || steps.cache-ortools.outputs.cache-hit != 'true' || steps.cache-mod-sat-runner.outputs.cache-hit != 'true'
        run: |
          git clone https://github.com/microsoft/vcpkg.git
          cd vcpkg
          .\bootstrap-vcpkg.bat
        shell: powershell

      - name: Install ZLIB with vcpkg
        if: env.MOD_SAT_RUNNER_CHANGED == 'true' || steps.cache-ortools.outputs.cache-hit != 'true' || steps.cache-mod-sat-runner.outputs.cache-hit != 'true'
        run: |
          .\vcpkg\vcpkg.exe install zlib
        shell: powershell

      - name: Setup MSVC environment for Visual Studio 2022
        if: env.MOD_SAT_RUNNER_CHANGED == 'true' || steps.cache-ortools.outputs.cache-hit != 'true' || steps.cache-mod-sat-runner.outputs.cache-hit != 'true'
        uses: ilammy/msvc-dev-cmd@v1
        with:
          toolset: 14.3

      - name: Build mod_sat_runner
        if: env.MOD_SAT_RUNNER_CHANGED == 'true' || steps.cache-ortools.outputs.cache-hit != 'true' || steps.cache-mod-sat-runner.outputs.cache-hit != 'true'
        run: |
          cd or-tools
          mkdir build
          cd build
          cmake -G "Visual Studio 17 2022" -A x64 -DCMAKE_TOOLCHAIN_FILE=../../vcpkg/scripts/buildsystems/vcpkg.cmake ..
          cmake --build . --config Release --target mod_sat_runner

      - name: Upload compiled mod_sat_runner as artifact
        uses: actions/upload-artifact@v4
        with:
          name: mod_sat_runner
          path: or-tools/temp_cpp/mod_sat_runner/build/Release/bin/mod_sat_runner.exe



      - name: Check for changes in authenticator.js
        run: |
          $changed = git diff HEAD~1 --name-only | Select-String -Pattern "authenticator/authenticator.js"
          if ($null -ne $changed) {
            echo "AUTHENTICATOR_CHANGED=true" >> $env:GITHUB_ENV
          } else {
            echo "AUTHENTICATOR_CHANGED=false" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Cache SkedAuthenticator executable
        id: cache-authenticator
        uses: actions/cache@v4
        with:
          path: authenticator/build/win-unpacked
          key: skedauthenticator-${{ runner.os }}-${{ hashFiles('authenticator/**') }}
          restore-keys: skedauthenticator-${{ runner.os }}-

      - name: setup Node.js environment for packages
        if: env.AUTHENTICATOR_CHANGED == 'true' || steps.cache-authenticator.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'

      - name: Install dependencies for authenticator.js
        if: env.AUTHENTICATOR_CHANGED == 'true' || steps.cache-authenticator.outputs.cache-hit != 'true'
        run: |
          cd authenticator
          npm install
        shell: powershell

      - name: Build authenticator.exe
        if: env.AUTHENTICATOR_CHANGED == 'true' || steps.cache-authenticator.outputs.cache-hit != 'true'
        run: |
          cd authenticator
          npm run dist
        shell: powershell

      - name: Upload compiled SkedAuthenticator.exe as artifact
        uses: actions/upload-artifact@v4
        with:
          name: SkedAuthenticator
          path: authenticator/build/win-unpacked/SkedAuthenticator.exe



      - name: Check for changes in userServerMain.js
        run: |
          $changed = git diff HEAD~1 --name-only | Select-String -Pattern "userServerMain/userServerMain.js"
          if ($null -ne $changed) {
            echo "USER_SERVER_MAIN_CHANGED=true" >> $env:GITHUB_ENV
          } else {
            echo "USER_SERVER_MAIN_CHANGED=false" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Cache userServerMain executable
        id: cache-userServerMain
        uses: actions/cache@v4
        with:
          path: userServerMain/main.exe
          key: userServerMain-${{ runner.os }}-${{ hashFiles('userServerMain/**') }}
          restore-keys: userServerMain-${{ runner.os }}-

      - name: setup Node.js environment for packages
        if: env.USER_SERVER_MAIN_CHANGED == 'true' || steps.cache-userServerMain.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '20.11.0'

      - name: Install dependencies for userServerMain.js
        if: env.USER_SERVER_MAIN_CHANGED == 'true' || steps.cache-userServerMain.outputs.cache-hit != 'true'
        run: |
          cd userServerMain
          npm install -g nexe
          npm install
        shell: powershell

      - name: setup Node.js environment for nexe
        if: env.USER_SERVER_MAIN_CHANGED == 'true' || steps.cache-userServerMain.outputs.cache-hit != 'true'
        uses: actions/setup-node@v4
        with:
          node-version: '14.15.3'

      - name: Build userServerMain.js to main.exe
        if: env.USER_SERVER_MAIN_CHANGED == 'true' || steps.cache-userServerMain.outputs.cache-hit != 'true'
        run: |
          cd userServerMain
          nexe userServerMain.js -o main.exe
        shell: powershell

      - name: Upload compiled main.exe as artifact
        uses: actions/upload-artifact@v4
        with:
          name: main
          path: userServerMain/main.exe



      - name: Check for changes in Inno Setup script
        run: |
          $changed = git diff HEAD~1 --name-only | Select-String -Pattern "SkedAIUserServerGithubInstaller.iss"
          if ($null -ne $changed) {
            echo "INNO_SETUP_SCRIPT_CHANGED=true" >> $env:GITHUB_ENV
          } else {
            echo "INNO_SETUP_SCRIPT_CHANGED=false" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Determine if need to build installer
        run: |
          if ($env:MOD_SAT_RUNNER_CHANGED -eq "true" -or
              $env:AUTHENTICATOR_CHANGED -eq "true" -or
              $env:USER_SERVER_MAIN_CHANGED -eq "true" -or
              $env:INNO_SETUP_SCRIPT_CHANGED -eq "true") {
            echo "INNO_SETUP_CHANGED=true" >> $env:GITHUB_ENV
          } else {
            echo "INNO_SETUP_CHANGED=false" >> $env:GITHUB_ENV
          }
        shell: powershell

      - name: Download mod_sat_runner Artifact
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/download-artifact@v4
        with:
          name: mod_sat_runner
          path: downloaded-artifacts

      - name: Download SkedAuthenticator Artifact
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/download-artifact@v4
        with:
          name: SkedAuthenticator
          path: downloaded-artifacts

      - name: Download main.exe Artifact
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/download-artifact@v4
        with:
          name: main
          path: downloaded-artifacts

      - name: Install Inno Setup
        if: env.INNO_SETUP_CHANGED == 'true'
        run: |
          choco install innosetup
      
      - name: Create version.txt
        if: env.INNO_SETUP_CHANGED == 'true'
        run: |
          echo ${{ env.version_number }} > version.txt
        shell: powershell

      - name: Create token.txt
        if: env.INNO_SETUP_CHANGED == 'true'
        run: |
          New-Item -ItemType File -Path token.txt -Force
        shell: powershell

      - name: Install NSSM
        if: env.INNO_SETUP_CHANGED == 'true'
        run: |
          Invoke-WebRequest -Uri "https://nssm.cc/release/nssm-2.24.zip" -OutFile "nssm.zip"
          Expand-Archive -Path "nssm.zip" -DestinationPath "nssm"
        shell: powershell

      - name: Compile Installer
        if: env.INNO_SETUP_CHANGED == 'true'
        run: |
          "C:\Program Files (x86)\Inno Setup 6\ISCC.exe" SkedAIUserServerGithubInstaller.iss
        shell: cmd
        
      - name: Upload Installer as Artifact
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: Output\SkedAIUserServerInstaller.exe
      
      - name: Download Installer Artifact
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/download-artifact@v4
        with:
          name: windows-installer
          path: downloaded-artifacts
      
      - name: Check for Existing Release
        if: env.INNO_SETUP_CHANGED == 'true'
        run: |
          $headers = @{
            Authorization = "token $env:GITHUB_TOKEN"
            Accept = "application/vnd.github+json"
          }
          $uri = "https://api.github.com/repos/${{ github.repository }}/releases/tags/test-action"
          try {
            $response = Invoke-RestMethod -Headers $headers -Uri $uri -Method Get
            echo "RELEASE_ID=$($response.id)" | Out-File -Append -FilePath $env:GITHUB_ENV
          } catch {
            $errorMessage = $_.Exception.Message
            if ($errorMessage -like "*Not Found*") {
              echo "Release 'test-action' does not exist or was deleted."
            } else {
              throw $_
            }
          }
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Delete Existing Release
        if: env.INNO_SETUP_CHANGED == 'true' && env.RELEASE_ID
        run: |
          $headers = @{
            Authorization = "token $env:GITHUB_TOKEN"
            Accept = "application/vnd.github+json"
          }
          $uri = "https://api.github.com/repos/${{ github.repository }}/releases/$env:RELEASE_ID"
          Invoke-RestMethod -Headers $headers -Uri $uri -Method Delete
        shell: pwsh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RELEASE_ID: ${{ env.RELEASE_ID }}

      - name: Create Release
        id: create_release
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "test-action"
          release_name: "Test Release by Action"
          body: |
            This is an automated test release
          draft: false
          prerelease: ${{ env.is_prerelease == 'true' }}

      - name: Upload Release Asset
        if: env.INNO_SETUP_CHANGED == 'true'
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./Output/SkedAIUserServerInstaller.exe
          asset_name: SkedAIUserServerInstaller.exe
          asset_content_type: application/octet-stream
